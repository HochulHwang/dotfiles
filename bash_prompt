#!/bin/bash

#############################################
# .bash_prompt                              #
#  Junhyeok Ahn ( junhyeokahn91@gmail.com ) #
#############################################

# Color
GREEN1="\[\033[38;5;65m\]"
YELLOW1="\[\033[38;5;222m\]"
SKYBLUE1="\[\033[38;5;73m\]"
CLEAN="\[\033[38;5;152m\]"
PURPLE1="\[\033[38;5;60m\]"
LIGHT_RED="\[\033[38;5;203m\]"
GREEN="\[\033[0;32m\]"
COLOR_NONE="\[\e[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working tree clean" ]]; then
    state="${CLEAN}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${PURPLE1}"
  else
    state="${LIGHT_RED}"
  fi

  # Set arrow icon based on status against remote.
  remote_pattern="Your branch is (.*) (of|by|with)"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == ahead* ]]; then
      remote="↑"
    elif [[ ${BASH_REMATCH[1]} == behind* ]]; then
      remote="↓"
    else
      remote="--"
    fi
  else
    remote=""
  fi

  diverge_pattern="Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  # Get the name of the branch.
  branch_pattern="^(# )?On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[2]}
  fi
  branch="$(git rev-parse --abbrev-ref HEAD)" # replace all 4 lines with this.

  # Set the final branch string.
  BRANCH="${state}(${branch})${remote}${COLOR_NONE} "
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="${GREEN}<\$>${COLOR_NONE}"
  else
      PROMPT_SYMBOL="${LIGHT_RED}<\$>${COLOR_NONE}"
  fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {

  # Conda
  if test -n "$CONDA_DEFAULT_ENV" ; then
        PYTHON_VIRTUALENV="${SKYBLUE1}[`basename \"$CONDA_DEFAULT_ENV\"`]${COLOR_NONE} "

  # VirtualEnv
  elif test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""

  else
      PYTHON_VIRTUALENV="${SKYBLUE1}[`basename \"$VIRTUAL_ENV\"`]${COLOR_NONE} "
  fi
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi
  # Set the bash prompt variable.
  PS1="${PYTHON_VIRTUALENV}${GREEN1}\u ${YELLOW1}\w ${COLOR_NONE}${BRANCH}"
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
